
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int @id @default(autoincrement())
  title     String
  thumbnail String?
  users     User[]
}

model Donation {
  id            Int      @id @default(autoincrement())
  amount        Float
  name          String
  message       String?
  to            User     @relation(fields: [toId], references: [id])
  toId          String
  createdAt     DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Follower {
  id         String   @id @default(cuid())
  followerId String
  followingId String
  createdAt  DateTime @default(now())

  follower   User     @relation("UserFollowers", fields: [followerId], references: [id])
  following  User     @relation("UserFollowing", fields: [followingId], references: [id])
}

model Socials {
  id            String   @id @unique @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  platform      String   // e.g. 'facebook', 'instagram', 'x', ...
  accountName   String
  @@unique([userId, platform], name: "userId_platform")
}

model User {
  id                  String      @id @default(cuid())
  username            String?
  avatar              String?
  about               String?
  backgroundCover     String?
  password            String?
  name                String?
  email               String      @unique
  emailVerified       DateTime?
  goalAmount          Int         @default(0)
  totalProgress       Int         @default(0)
  totalGains          Int         @default(0)
  totalSupporters     Int         @default(0)
  image               String?
  mainUrl             String?
  notifyDonation      Boolean     @default(true)
  notifyNewFollower   Boolean     @default(true)
  verified            Boolean     @default(false)
  accounts            Account[]
  sessions            Session[]
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  donations           Donation[]
  categories          Category[]
  followers           Follower[] @relation("UserFollowers")
  following           Follower[] @relation("UserFollowing")
  socials             Socials[]
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
